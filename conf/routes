# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                  controllers.Application.index

GET           /app                                               controllers.Application.index
GET           /app/*path                                         controllers.Application.app(path)

# Authentication
GET           /login                                             controllers.Auth.login
POST          /authenticate                                      controllers.Auth.authenticate

# User
GET           /user                                              controllers.Users.getUser
PUT           /user                                              controllers.Users.saveUser
POST          /user                                              controllers.Users.createUser
DELETE        /user                                              controllers.Users.deleteUser(userId: Option[Int] ?= None)
POST          /user/logout                                       controllers.Users.logout

# Notificatons
GET           /notifications                                     controllers.Notifications.notifications

# Management
GET         /management/ping                           controllers.docker.Management.ping
GET         /management/docker/ping                    controllers.docker.Management.pingDockerRemoteApi(serverUrl: String)
POST        /management/containers/deploy/:name        controllers.docker.DeployManagement.deploy(serverUrl: String, name: String, repo: Option[String] ?= None, tag: Option[String] ?= None)

# ImagesManagement
GET           /management/images                                 controllers.docker.ImagesManagement.listImages(serverUrl: String)
GET           /management/images/:name                           controllers.docker.ImagesManagement.inspectImage(serverUrl: String, name: String)
POST          /management/images/:name                           controllers.docker.ImagesManagement.createImage(serverUrl: String, name: String)
DELETE        /management/images/:name                           controllers.docker.ImagesManagement.removeImage(serverUrl: String, name: String)
GET           /management/images/:name/history                   controllers.docker.ImagesManagement.historyImage(serverUrl: String, name: String)
POST          /management/images/:name/push/:repo                controllers.docker.ImagesManagement.pushImage(serverUrl: String, repo: String, name: String)

# ContainerManagement
GET         /management/containers        controllers.docker.ContainerManagement.listContainers(serverUrl: String)
POST        /management/containers        controllers.docker.ContainerManagement.createContainer(serverUrl: String, name: Option[String] ?= None)
GET           /management/containers/:containerId                controllers.docker.ContainerManagement.show(serverUrl: String, containerId: String)
POST          /management/containers/:containerId/start          controllers.docker.ContainerManagement.startContainer(serverUrl: String, containerId: String)
POST          /management/containers/:containerId/stop           controllers.docker.ContainerManagement.stopContainer(serverUrl: String, containerId: String)
POST          /management/containers/:containerId/kill           controllers.docker.ContainerManagement.killContainer(serverUrl: String, containerId: String)
POST          /management/containers/:containerId/pause          controllers.docker.ContainerManagement.pauseContainer(serverUrl: String, containerId: String)
POST          /management/containers/:containerId/unpause        controllers.docker.ContainerManagement.unPauseContainer(serverUrl: String, containerId: String)
POST          /management/containers/:containerId/rename         controllers.docker.ContainerManagement.renameContainer(serverUrl: String, containerId: String, newName: String)
POST          /management/containers/:containerId/remove         controllers.docker.ContainerManagement.removeContainer(serverUrl: String, containerId: String, deleteVolumes: Boolean, force: Boolean)

# ServerManagementController
GET           /servermanagement/ping                             controllers.ServerManagement.ping
GET           /servermanagement/servers                          controllers.ServerManagement.servers
POST          /servermanagement/servers/add                      controllers.ServerManagement.createServer
GET           /servermanagement/servers/:serverId                controllers.ServerManagement.show(serverId: String)
POST          /servermanagement/servers/:serverId/stop           controllers.ServerManagement.powerOff(serverId: String)
POST          /servermanagement/servers/:serverId/start          controllers.ServerManagement.powerOn(serverId: String)
DELETE        /servermanagement/servers/:serverId/delete         controllers.ServerManagement.delete(serverId: String)
POST          /servermanagement/servers/:serverId/reboot         controllers.ServerManagement.reboot(serverId: String)
GET           /servermanagement/api-key                          controllers.ServerManagement.getApiKey
POST          /servermanagement/add-info                         controllers.ServerManagement.authenticateApiKey
GET           /servermanagement/server-options                   controllers.ServerManagement.getServerOptions
GET           /servermanagement/ssh-keys                         controllers.ServerManagement.getSSHKeys

#TODO


# Map static resources from the /public folder to the /assets URL path
GET           /images/*file                                      controllers.Assets.at(path="/public/images", file)
GET           /javascripts/vendor/*file                          controllers.Assets.at(path="/public/javascripts/vendor", file)
GET           /bower_components/*file                            controllers.Assets.at(path="/public/bower_components", file)
GET           /assets/*file                                      controllers.Assets.at(path="/public/dev/assets", file)

# Map web jar assets from sbt to the /webjars URL path (includes bootstrap & angularjs
GET           /webjars/*file                                     controllers.WebJarAssets.at(file)
